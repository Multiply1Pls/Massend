{"version":3,"sources":["Input.js","List.js","App.js","config.js","serviceWorker.js","index.js"],"names":["InputData","state","msg","onTextChange","e","setState","target","value","onClickButton","props","onClickButtonHandler","classes","this","className","InpuChatButton","onChange","placeholder","onClick","Component","withStyles","padding","backgroundColor","borderTop","borderBottomRightRadius","borderBottomLeftRadius","position","bottom","ListData","listMsg","map","key","message","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","onClickButtonHandlerData","listMsgData","concat","Math","random","toString","replace","database","ref","set","that","on","snapshot","val","List","Input","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wNAeMA,E,2MAGFC,MAAQ,CACJC,IAAK,I,EAGTC,aAAe,SAACC,GACZ,EAAKC,SAAS,CACVH,IAAKE,EAAEE,OAAOC,S,EAItBC,cAAgB,WACZ,EAAKC,MAAMC,qBAAqB,EAAKT,MAAMC,M,wEAGrC,IACES,EAAYC,KAAKH,MAAjBE,QACR,OACI,yBAAKE,UAAWF,EAAQG,gBAEpB,6BACI,2BACIC,SAAUH,KAAKT,aACfI,MAAOK,KAAKX,MAAMC,IAIlBc,YAAY,8BAChB,8BACI,4BACIC,QAASL,KAAKJ,eADlB,e,GA/BAU,aAwCTC,cApDC,CACZL,eAAgB,CACZM,QAAS,YACTC,gBAAiB,UACjBC,UAAW,iBACXC,wBAAyB,MACzBC,uBAAwB,MACxBC,SAAU,QACVC,OAAQ,OA4CDP,CAAoBnB,GC3BpB2B,EAfE,SAAClB,GAEd,OAEI,6BAEQA,EAAMmB,QAAQC,IAAK,SAAA3B,GACf,OAAO,uBAAG4B,IAAQ5B,EAAI4B,KAAQ5B,EAAI6B,a,iBCftDC,IAASC,cCkBa,CACjBC,OAAQ,0CACPC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,gBACnBC,MAAO,yC,IDiBEC,E,YApCb,WAAYhC,GAAQ,IAAD,uBACjB,4CAAMA,KAHRR,MAAQ,CAAE2B,QAAS,IAEA,EAYnBc,yBAA2B,SAACxC,GAC1B,IAAMyC,EAAc,EAAK1C,MAAM2B,QAAQgB,OAAO,CAC5Cd,IAAKe,KAAKC,SAASC,WAAWC,QAAQ,IAAI,IAC1CjB,QAAS7B,IAEX8B,IAASiB,WAAWC,IAAI,YAAYC,IAAIR,IAfxC,IAAIS,EAAI,eAFS,OAGjBpB,IAASiB,WAAWC,IAAI,aAAaG,GAAG,QAAS,SAASC,GACnC,MAAlBA,EAASC,OACTH,EAAK/C,SAAS,CACbuB,QAAQ0B,EAASC,UANN,E,sEAqBD3C,KAAKX,MAAM2B,QAAQC,IAAK,SAAA3B,GACtC,OAAO,2BAAIA,EAAI6B,WAEjB,OACE,yBAAKlB,UAAU,aACb,kBAAC2C,EAAD,CACI5B,QAAWhB,KAAKX,MAAM2B,UAC1B,kBAAC6B,EAAD,CACI/C,qBAAwBE,KAAK8B,gC,GAjCvBxB,aEKEwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.a01d0ef6.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { withStyles } from '@material-ui/styles';\r\n\r\nconst Styeles = {\r\n    InpuChatButton: {\r\n        padding: '10px 15px',\r\n        backgroundColor: '#f5f5f5',\r\n        borderTop: '1px solid #ddd',\r\n        borderBottomRightRadius: '3px',\r\n        borderBottomLeftRadius: '3px',\r\n        position: 'fixed',\r\n        bottom: '0%',\r\n\r\n    }\r\n}\r\nclass InputData extends Component {\r\n\r\n\r\n    state = {\r\n        msg: \"\"\r\n    }\r\n\r\n    onTextChange = (e) => {\r\n        this.setState({\r\n            msg: e.target.value\r\n        })\r\n    }\r\n\r\n    onClickButton = () => {\r\n        this.props.onClickButtonHandler(this.state.msg)\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        return (\r\n            <div className={classes.InpuChatButton}>\r\n                {/* <div> */}\r\n                <div >\r\n                    <input\r\n                        onChange={this.onTextChange}\r\n                        value={this.state.msg}\r\n                        // id=\"btn-input\" \r\n                        // type=\"text\" \r\n                        // className=\"form-control input-sm\" \r\n                        placeholder=\"Type your message here...\" />\r\n                    <span>\r\n                        <button\r\n                            onClick={this.onClickButton}>\r\n                            Send</button>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default withStyles(Styeles)(InputData);","import React from 'react'\r\n// import { withStyles } from '@material-ui/styles';\r\n\r\n\r\n// const Styeles ={\r\n//     OverScroll:{\r\n//         marginTop:'10px',\r\n//         overflowY:'scroll',\r\n//         position:'unset',\r\n//     }\r\n\r\n// }\r\n\r\nconst ListData = (props) => {\r\n// const {classes} = props\r\n    return (\r\n        // <div className={classes.OverScroll}>\r\n        <div>\r\n            {\r\n                props.listMsg.map( msg =>{\r\n                    return <p key = { msg.key }>{ msg.message }</p>\r\n                }) \r\n            }\r\n        </div>        \r\n    )\r\n\r\n}\r\n\r\nexport default ListData;\r\n// export default withStyles(Styeles)(ListData);","import React, { Component } from 'react';\nimport InputData from './Input'\nimport ListData from './List'\nimport firebase from 'firebase'\nimport { Config } from './config'\nfirebase.initializeApp(Config)\n\nclass App extends Component {\n  \n  state = { listMsg: [] }\n\n  constructor(props) {\n    super(props)\n    var that  = this;\n    firebase.database().ref('messag e/').on('value', function(snapshot) {\n      if(snapshot.val() != null) { \n         that.setState({\n          listMsg:snapshot.val()\n         })\n       }\n    });\n  }\n\n  onClickButtonHandlerData = (msg) => {\n    const listMsgData = this.state.listMsg.concat({\n      key: Math.random().toString().replace('.',''),\n      message: msg\n     })\n    firebase.database().ref('message/').set(listMsgData);\n  }\n\n  render() {\n    const listMsg = this.state.listMsg.map( msg => {\n      return <p>{msg.message}</p>\n    })\n    return (\n      <div className=\"container\">\n        <ListData\n            listMsg = {this.state.listMsg} />\n        <InputData \n            onClickButtonHandler = {this.onClickButtonHandlerData}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","//  import react from 'react'\r\n\r\n//  import * as firebase from 'firebase'\r\n//  class config extends React.Component{\r\n\r\n//     render(){\r\n//         return(\r\n//             <div>\r\n//                 const Config = {   \r\n//  apiKey: \"AIzaSyBvENjGnJ-FE19bBbnhULSa_y58jwG9KOk\",\r\n//   authDomain: \"messenger-6ca1c.firebaseapp.com\",\r\n//   databaseURL: \"https://messenger-6ca1c.firebaseio.com\",\r\n//   projectId: \"messenger-6ca1c\",\r\n//   storageBucket: \"messenger-6ca1c.appspot.com\",\r\n//   messagingSenderId: \"1029167883186\",\r\n//   appId: \"1:1029167883186:web:016879225a5d6450\"  \r\n// };\r\n//             </div>\r\n//         )\r\n//     }\r\n//  }\r\n  \r\n// export default firebase.initializeApp(Config);\r\nexport const Config = {   \r\n     apiKey: \"AIzaSyBvENjGnJ-FE19bBbnhULSa_y58jwG9KOk\",\r\n      authDomain: \"messenger-6ca1c.firebaseapp.com\",\r\n      databaseURL: \"https://messenger-6ca1c.firebaseio.com\",\r\n      projectId: \"messenger-6ca1c\",\r\n      storageBucket: \"messenger-6ca1c.appspot.com\",\r\n      messagingSenderId: \"1029167883186\",\r\n      appId: \"1:1029167883186:web:016879225a5d6450\"  \r\n    };\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}